#!/usr/bin/env node

/*
Copyright 2016 Google, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var parseString = require('xml2js').parseString;
var fs = require('fs');

var codePointAt = function(position) {
  if (this == null) {
    throw TypeError();
  }
  var string = String(this);
  var size = string.length;
  // `ToInteger`
  var index = position ? Number(position) : 0;
  if (index != index) { // better `isNaN`
    index = 0;
  }
  // Account for out-of-bounds indices:
  if (index < 0 || index >= size) {
    return undefined;
  }
  // Get the first code unit
  var first = string.charCodeAt(index);
  var second;
  if ( // check if itâ€™s the start of a surrogate pair
    first >= 0xD800 && first <= 0xDBFF && // high surrogate
    size > index + 1 // there is a next code unit
  ) {
    second = string.charCodeAt(index + 1);
    if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    }
  }
  return first;
};
if (Object.defineProperty) {
  Object.defineProperty(String.prototype, 'codePointAt', {
    'value': codePointAt,
    'configurable': true,
    'writable': true
  });
} else {
  String.prototype.codePointAt = codePointAt;
}

parseString(fs.readFileSync(__dirname + '/data/emoji_annotations.xml', 'utf8'), function(err, data) {
  var data = data.ldml.annotations[0].annotation.map(function(annotation) {
    var code = annotation.$.cp.codePointAt(1).toString(16);
    try {
      fs.statSync(process.env.HOME + '/Downloads/noto-emoji/svg/emoji_u' + code + '.svg')
      return {
        desc: annotation.$.tts,
        tags: annotation._.split('; '),
        code: code,
        urls: {
          svg: 'https://storage.googleapis.com/teamoji-app.appspot.com/emoji/svg/emoji_u' + code + '.svg'
        }
      };
    } catch (e) {
      process.stderr.write('- missing "' + annotation.$.tts + '"\n');
    }
  }).filter(function(entry) {
    return !!entry;
  });

  console.log(JSON.stringify(data, null, 2));
});
