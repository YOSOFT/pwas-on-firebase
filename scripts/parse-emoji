#!/usr/bin/env node

var parseString = require('xml2js').parseString;
var fs = require('fs');

var codePointAt = function(position) {
  if (this == null) {
    throw TypeError();
  }
  var string = String(this);
  var size = string.length;
  // `ToInteger`
  var index = position ? Number(position) : 0;
  if (index != index) { // better `isNaN`
    index = 0;
  }
  // Account for out-of-bounds indices:
  if (index < 0 || index >= size) {
    return undefined;
  }
  // Get the first code unit
  var first = string.charCodeAt(index);
  var second;
  if ( // check if itâ€™s the start of a surrogate pair
    first >= 0xD800 && first <= 0xDBFF && // high surrogate
    size > index + 1 // there is a next code unit
  ) {
    second = string.charCodeAt(index + 1);
    if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    }
  }
  return first;
};
if (Object.defineProperty) {
  Object.defineProperty(String.prototype, 'codePointAt', {
    'value': codePointAt,
    'configurable': true,
    'writable': true
  });
} else {
  String.prototype.codePointAt = codePointAt;
}

parseString(fs.readFileSync(__dirname + '/data/emoji_annotations.xml', 'utf8'), function(err, data) {
  var data = data.ldml.annotations[0].annotation.map(function(annotation) {
    var code = annotation.$.cp.codePointAt(1).toString(16);
    return {
      desc: annotation.$.tts,
      tags: annotation._.split('; '),
      code: code,
      url: 'https://twemoji.maxcdn.com/2/svg/' + code + '.svg'
    };
  });

  console.log(JSON.stringify(data, null, 2));
});
